// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// Generator: Indicates that you want to generate Prisma Client
generator client {
  provider = "prisma-client-js"
}

// Data source: Specifies your database connection (via an environment variable)
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Data model: Defines your application models
// Represent a table in relational databases
// Provide the foundation for the queries in the Prisma Client API
model Post {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title     String   @db.VarChar(255)
  content   String?
  published Boolean  @default(false)
  author    User     @relation(fields: [authorId], references: [id])
  authorId  Int
}

model Profile {
  id     Int     @id @default(autoincrement())
  bio    String?
  user   User    @relation(fields: [userId], references: [id])
  userId Int     @unique
}

//model User {
//id       Int        @id @default(autoincrement())
//email    String     @unique
//name     String?
//posts    Post[]
//profile  Profile?
//ModelTwo ModelTwo[]
//}

model ModelOne {
  id            Int        @id @default(autoincrement()) // Field level attribute, sets attribute to field.
  name          String // e.g DanishKodeMonkey
  age           Int
  email         String     @unique // E.g DanishKode@Monkey.Banana with unique attribute (cannot be duplicates)
  isAdmin       Boolean // true/false
  role          Role       @default(BASIC) // role determined from custom ENUM type
  largeNumber   BigInt // big number
  preferences   Json //json format
  blob          Bytes // file byte breakdown
  Post          ModelTwo[] @relation("Posts") // Many relationship
  FavoritePosts ModelTwo[] @relation("FavoritePost") // Second many relation to same table, use relation names

  // Block level attribute, applies to whole block (denoted by @@)
  @@unique([age, name]) // This specifically requires "age" and "name" to be unique
  @@index([email]) // indexes email field on this block
}

model ModelFour {
  id           String   @id @default(uuid())
  emailUpdated Boolean
  user         ModelOne
}

model ModelTwo {
  //id            Int      @id @default(autoincrement())
  rating        Float // e.g 2.3
  createdAt     DateTime @default(now()) // E.g YYYY-MM-DD HH:MM:SS default attributes sets time to now 
  updatedAt     DateTime @updatedAt // E.g YYYY-MM-DD HH:MM:SS updatedAt attribute automatically updates this field when updated data.
  author        ModelOne @relation("Posts", fields: [modelOneId], references: [id]) // One relationship
  modelOneId    Int // Scalar field
  // when using two relations between same tables, define relation names
  favoritedBy   ModelOne @relation("FavoritePost", fields: [favoritedById], references: [id])
  favoritedById Int?
}

model ModelThree {
  // id here is uuid, more unique and secure.
  id    String     @id @default(uuid())
  posts ModelTwo[] // Many relationship
}

// Custom enum types
enum Role {
  BASIC
  USER
  ADMIN
}
